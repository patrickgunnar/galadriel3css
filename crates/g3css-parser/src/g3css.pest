// Defines the structure of a program where it starts (SOI), defines a component or global element (define), and ends (EOI).
program = _{
    SOI ~ define ~ EOI
}

// Specifies that 'define' can match either 'global' or 'component'.
define = _{ global | component }

// Matches the literal string "define".
assignment = _{ "define" }
// Matches any alphanumeric characters or underscores zero or more times.
alpha_num_with_underscore = _{ (ALPHANUMERIC+ | "_")* }
// Matches a value enclosed in quotation marks.
quotted_value = _{ QUOTATION_MARK ~  alpha_num_with_underscore ~ QUOTATION_MARK }
// Matches any content inside quotation marks.
elements_value = _{ QUOTATION_MARK ~ (!QUOTATION_MARK ~ ANY)* ~ QUOTATION_MARK }

// Matches a quoted value for a name.
name = { quotted_value }
// Matches a quoted value for extension.
extends = { quotted_value }

// Matches any of these global elements.
global_elements = _{ alias | variables | classes | class | theme }
// Matches any of these component elements.
component_elements = _{ alias | variables | classes | class }

// Matches a comma-separated list of global elements.
global_children = { global_elements ~ ("," ~ global_elements)* ~ ","? }
// Matches a comma-separated list of component elements.
component_children = { component_elements ~ ("," ~ component_elements)* ~ ","? }

// Matches a global assignment with a name and child elements.
global = { 
    assignment ~ "global" ~ "scope" ~ name ~ "{" ~ global_children ~ "}"
}

// Matches a component assignment with optional extension and child elements.
component = {
    assignment ~ "component" ~ "scope" ~ name ~ ("extends" ~ "global" ~ extends)? ~
    "{" ~ component_children ~ "}"
}

// TO WORK LATER
value = { alpha_num_with_underscore }

alias = { assignment ~ "alias" ~ "{" ~ value ~ "}" }
variables = { assignment ~ "variables" ~ "{" ~ value ~ "}" }
theme = { assignment ~ "theme" ~ "{" ~ value ~ "}" }
// END WORK LATER

// Defines a class_name rule that matches a quoted value.
class_name = { quotted_value }
// Defines an inherits rule that matches a quoted value.
inherits = { quotted_value }

// Defines an important_property rule that matches the word "important", followed by a colon (":"), and an important value.
important_property = _{ "!important" ~ ":" ~ important }
// Defines an important rule that matches either "true" or "false".
important = { ("true" | "false") }

// Defines WHITESPACE rule that matches any whitespace characters: space, tab, carriage return, or newline.
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
// Defines ALPHANUMERIC rule that matches one or more ASCII alphanumeric characters.
ALPHANUMERIC = _{ ASCII_ALPHANUMERIC+ }

// Defines classes_children rule that matches a class_name, optionally followed by "inherits" and inherits,
// enclosed in curly braces, allowing for multiple class_children separated by commas.
inner_classes = {
    class_name ~ ("inherits" ~ inherits)? ~ "{" ~ 
        class_children ~ ("," ~ class_children)* ~ ","?
    ~ "}"
}

// Defines classes rule that matches an assignment followed by "classes",
// containing inner_classes enclosed in square brackets,
// allowing for multiple inner_classes separated by commas.
classes = {
    assignment ~ "classes" ~ "[" ~
        inner_classes ~ ("," ~ inner_classes)* ~ ","?
    ~ "]"
}

// Defines class rule that matches an assignment followed by "class", followed by a class_name and
// optionally followed by "inherits" and inherits, enclosed in curly braces,
// allowing for multiple class_children separated by commas.
class = { 
    assignment ~ "class" ~ class_name ~ ("inherits" ~ inherits)? ~ "{" ~ 
        class_children ~ ("," ~ class_children)* ~ ","?
    ~ "}" 
}

// Matches various properties, pseudo-classes, and pseudo-elements
class_children = _{
    important_property | properties | hover | active | focus | first_child | last_child | first_of_type |
    last_of_type | only_child | only_of_type | target_pseudo_class | visited | checked | disabled | enabled |
    read_only | read_write | placeholder_shown | valid | invalid | required | optional | fullscreen | focus_within |
    first_line | first_letter | before | after | out_of_range | root | first_page | left_page | right_page | empty
}

// This group matches a list of properties, pseudo-classes, and pseudo-elements inside curly braces
properties = {
    "properties" ~ ":" ~ "{" ~ 
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
hover = {
    "hover" ~ ":" ~ "{" ~ 
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
active = {
    "active" ~ ":" ~ "{" ~ 
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
focus = {
    "focus" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
first_child = {
    "first_child" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
last_child = {
    "last_child" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
first_of_type = {
    "first_of_type" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
last_of_type = {
    "last_of_type" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
only_child = {
    "only_child" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
only_of_type = {
    "only_of_type" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
target_pseudo_class = {
    "target_pseudo_class" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
visited = {
    "visited" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
checked = {
    "checked" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
disabled = {
    "disabled" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
enabled = {
    "enabled" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
read_only = {
    "read_only" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
read_write = {
    "read_write" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
placeholder_shown = {
    "placeholder_shown" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
valid = {
    "valid" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
invalid = {
    "invalid" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
required = {
    "required" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
optional = {
    "optional" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
fullscreen = {
    "fullscreen" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
focus_within = {
    "focus_within" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
first_line = {
    "first_line" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
first_letter = {
    "first_letter" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
before = {
    "before" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
after = {
    "after" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
out_of_range = {
    "out_of_range" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
root = {
    "root" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
first_page = {
    "first_page" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
left_page = {
    "left_page" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
right_page = {
    "right_page" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}
empty = {
    "empty" ~ ":" ~ "{" ~
        property ~ ("," ~ property)* ~ ","?
    ~ "}"
}

// This group of rules matches a "property" key followed by a colon ":" and then expects a string value.
property = _{
    "aspect_ratio" ~ ":" ~ aspect_ratio |
    "accent_color" ~ ":" ~ accent_color |
    "backdrop_filter" ~ ":" ~ backdrop_filter |
    "content" ~ ":" ~ content |
    "gap" ~ ":" ~ gap |
    "row_gap" ~ ":" ~ row_gap |
    "scale" ~ ":" ~ scale |
    "order" ~ ":" ~ order |
    "pointer_events" ~ ":" ~ pointer_events |
    "margin" ~ ":" ~ margin |
    "margin_bottom" ~ ":" ~ margin_bottom |
    "margin_left" ~ ":" ~ margin_left |
    "margin_right" ~ ":" ~ margin_right |
    "margin_top" ~ ":" ~ margin_top |
    "padding" ~ ":" ~ padding |
    "padding_bottom" ~ ":" ~ padding_bottom |
    "padding_left" ~ ":" ~ padding_left |
    "padding_right" ~ ":" ~ padding_right |
    "padding_top" ~ ":" ~ padding_top |
    "height" ~ ":" ~ height |
    "width" ~ ":" ~ width |
    "filter" ~ ":" ~ filter |
    "max_height" ~ ":" ~ max_height |
    "max_width" ~ ":" ~ max_width |
    "min_height" ~ ":" ~ min_height |
    "min_width" ~ ":" ~ min_width |
    "border" ~ ":" ~ border |
    "border_bottom" ~ ":" ~ border_bottom |
    "border_bottom_color" ~ ":" ~ border_bottom_color |
    "border_bottom_style" ~ ":" ~ border_bottom_style |
    "border_bottom_width" ~ ":" ~ border_bottom_width |
    "border_color" ~ ":" ~ border_color |
    "border_left" ~ ":" ~ border_left |
    "border_left_color" ~ ":" ~ border_left_color |
    "border_left_style" ~ ":" ~ border_left_style |
    "border_left_width" ~ ":" ~ border_left_width |
    "border_right" ~ ":" ~ border_right |
    "border_right_color" ~ ":" ~ border_right_color |
    "border_right_styles" ~ ":" ~ border_right_styles |
    "border_right_width" ~ ":" ~ border_right_width |
    "border_style" ~ ":" ~ border_style |
    "border_top" ~ ":" ~ border_top |
    "border_top_color" ~ ":" ~ border_top_color |
    "border_top_style" ~ ":" ~ border_top_style |
    "border_top_width" ~ ":" ~ border_top_width |
    "border_width" ~ ":" ~ border_width |
    "outline" ~ ":" ~ outline |
    "outline_color" ~ ":" ~ outline_color |
    "outline_style" ~ ":" ~ outline_style |
    "outline_width" ~ ":" ~ outline_width |
    "border_bottom_left_radius" ~ ":" ~ border_bottom_left_radius |
    "border_bottom_right_radius" ~ ":" ~ border_bottom_right_radius |
    "border_image" ~ ":" ~ border_image |
    "border_image_outset" ~ ":" ~ border_image_outset |
    "border_image_repeat" ~ ":" ~ border_image_repeat |
    "border_image_slice" ~ ":" ~ border_image_slice |
    "border_image_source" ~ ":" ~ border_image_source |
    "border_image_width" ~ ":" ~ border_image_width |
    "border_radius" ~ ":" ~ border_radius |
    "border_top_left_radius" ~ ":" ~ border_top_left_radius |
    "border_top_right_radius" ~ ":" ~ border_top_right_radius |
    "box_decoration_break" ~ ":" ~ box_decoration_break |
    "box_shadow" ~ ":" ~ box_shadow |
    "background" ~ ":" ~ background |
    "background_attachment" ~ ":" ~ background_attachment |
    "background_color" ~ ":" ~ background_color |
    "background_image" ~ ":" ~ background_image |
    "background_position" ~ ":" ~ background_position |
    "background_position_x" ~ ":" ~ background_position_x |
    "background_position_y" ~ ":" ~ background_position_y |
    "background_repeat" ~ ":" ~ background_repeat |
    "background_clip" ~ ":" ~ background_clip |
    "background_origin" ~ ":" ~ background_origin |
    "background_size" ~ ":" ~ background_size |
    "background_blend_mode" ~ ":" ~ background_blend_mode |
    "color_profile" ~ ":" ~ color_profile |
    "opacity" ~ ":" ~ opacity |
    "rendering_intent" ~ ":" ~ rendering_intent |
    "font" ~ ":" ~ font |
    "font_family" ~ ":" ~ font_family |
    "font_size" ~ ":" ~ font_size |
    "font_style" ~ ":" ~ font_style |
    "font_variant" ~ ":" ~ font_variant |
    "font_weight" ~ ":" ~ font_weight |
    "font_size_adjust" ~ ":" ~ font_size_adjust |
    "font_stretch" ~ ":" ~ font_stretch |
    "positioning" ~ ":" ~ positioning |
    "bottom" ~ ":" ~ bottom |
    "clear" ~ ":" ~ clear |
    "clip_path" ~ ":" ~ clip_path |
    "cursor" ~ ":" ~ cursor |
    "display" ~ ":" ~ display |
    "float" ~ ":" ~ float |
    "left" ~ ":" ~ left |
    "overflow" ~ ":" ~ overflow |
    "position" ~ ":" ~ position |
    "right" ~ ":" ~ right |
    "top" ~ ":" ~ top |
    "visibility" ~ ":" ~ visibility |
    "z_index" ~ ":" ~ z_index |
    "color" ~ ":" ~ color |
    "direction" ~ ":" ~ direction |
    "flex_direction" ~ ":" ~ flex_direction |
    "flex_wrap" ~ ":" ~ flex_wrap |
    "letter_spacing" ~ ":" ~ letter_spacing |
    "line_height" ~ ":" ~ line_height |
    "line_break" ~ ":" ~ line_break |
    "text_align" ~ ":" ~ text_align |
    "text_decoration" ~ ":" ~ text_decoration |
    "text_indent" ~ ":" ~ text_indent |
    "text_transform" ~ ":" ~ text_transform |
    "unicode_bidi" ~ ":" ~ unicode_bidi |
    "vertical_align" ~ ":" ~ vertical_align |
    "white_space" ~ ":" ~ white_space |
    "word_spacing" ~ ":" ~ word_spacing |
    "text_outline" ~ ":" ~ text_outline |
    "text_overflow" ~ ":" ~ text_overflow |
    "text_shadow" ~ ":" ~ text_shadow |
    "text_wrap" ~ ":" ~ text_wrap |
    "word_break" ~ ":" ~ word_break |
    "word_wrap" ~ ":" ~ word_wrap |
    "list_style" ~ ":" ~ list_style |
    "list_style_image" ~ ":" ~ list_style_image |
    "list_style_position" ~ ":" ~ list_style_position |
    "list_style_type" ~ ":" ~ list_style_type |
    "border_collapse" ~ ":" ~ border_collapse |
    "border_spacing" ~ ":" ~ border_spacing |
    "caption_side" ~ ":" ~ caption_side |
    "empty_cells" ~ ":" ~ empty_cells |
    "table_layout" ~ ":" ~ table_layout |
    "marquee_direction" ~ ":" ~ marquee_direction |
    "marquee_play_count" ~ ":" ~ marquee_play_count |
    "marquee_speed" ~ ":" ~ marquee_speed |
    "marquee_style" ~ ":" ~ marquee_style |
    "overflow_x" ~ ":" ~ overflow_x |
    "overflow_y" ~ ":" ~ overflow_y |
    "overflow_style" ~ ":" ~ overflow_style |
    "rotation" ~ ":" ~ rotation |
    "box_align" ~ ":" ~ box_align |
    "box_direction" ~ ":" ~ box_direction |
    "box_flex" ~ ":" ~ box_flex |
    "box_flex_group" ~ ":" ~ box_flex_group |
    "box_lines" ~ ":" ~ box_lines |
    "box_ordinal_group" ~ ":" ~ box_ordinal_group |
    "box_orient" ~ ":" ~ box_orient |
    "box_pack" ~ ":" ~ box_pack |
    "alignment_adjust" ~ ":" ~ alignment_adjust |
    "alignment_baseline" ~ ":" ~ alignment_baseline |
    "baseline_shift" ~ ":" ~ baseline_shift |
    "dominant_baseline" ~ ":" ~ dominant_baseline |
    "drop_initial_after_adjust" ~ ":" ~ drop_initial_after_adjust |
    "drop_initial_after_align" ~ ":" ~ drop_initial_after_align |
    "drop_initial_before_adjust" ~ ":" ~ drop_initial_before_adjust |
    "drop_initial_before_align" ~ ":" ~ drop_initial_before_align |
    "drop_initial_size" ~ ":" ~ drop_initial_size |
    "drop_initial_value" ~ ":" ~ drop_initial_value |
    "inline_box_align" ~ ":" ~ inline_box_align |
    "line_stacking" ~ ":" ~ line_stacking |
    "line_stacking_ruby" ~ ":" ~ line_stacking_ruby |
    "line_stacking_shift" ~ ":" ~ line_stacking_shift |
    "line_stacking_strategy" ~ ":" ~ line_stacking_strategy |
    "text_height" ~ ":" ~ text_height |
    "column_count" ~ ":" ~ column_count |
    "column_fill" ~ ":" ~ column_fill |
    "column_gap" ~ ":" ~ column_gap |
    "column_rule" ~ ":" ~ column_rule |
    "column_rule_color" ~ ":" ~ column_rule_color |
    "column_rule_style" ~ ":" ~ column_rule_style |
    "column_rule_width" ~ ":" ~ column_rule_width |
    "column_span" ~ ":" ~ column_span |
    "column_width" ~ ":" ~ column_width |
    "columns" ~ ":" ~ columns |
    "animation" ~ ":" ~ animation |
    "animation_name" ~ ":" ~ animation_name |
    "animation_duration" ~ ":" ~ animation_duration |
    "animation_timing_function" ~ ":" ~ animation_timing_function |
    "animation_delay" ~ ":" ~ animation_delay |
    "animation_fill_mode" ~ ":" ~ animation_fill_mode |
    "animation_iteration_count" ~ ":" ~ animation_iteration_count |
    "animation_direction" ~ ":" ~ animation_direction |
    "animation_play_state" ~ ":" ~ animation_play_state |
    "transform" ~ ":" ~ transform |
    "transform_origin" ~ ":" ~ transform_origin |
    "transform_style" ~ ":" ~ transform_style |
    "perspective" ~ ":" ~ perspective |
    "perspective_origin" ~ ":" ~ perspective_origin |
    "backface_visibility" ~ ":" ~ backface_visibility |
    "transition" ~ ":" ~ transition |
    "transition_property" ~ ":" ~ transition_property |
    "transition_duration" ~ ":" ~ transition_duration |
    "transition_timing_function" ~ ":" ~ transition_timing_function |
    "transition_delay" ~ ":" ~ transition_delay |
    "orphans" ~ ":" ~ orphans |
    "page_break_after" ~ ":" ~ page_break_after |
    "page_break_before" ~ ":" ~ page_break_before |
    "page_break_inside" ~ ":" ~ page_break_inside |
    "widows" ~ ":" ~ widows |
    "mark" ~ ":" ~ mark |
    "mark_after" ~ ":" ~ mark_after |
    "mark_before" ~ ":" ~ mark_before |
    "phonemes" ~ ":" ~ phonemes |
    "rest" ~ ":" ~ rest |
    "rest_after" ~ ":" ~ rest_after |
    "rest_before" ~ ":" ~ rest_before |
    "voice_balance" ~ ":" ~ voice_balance |
    "voice_duration" ~ ":" ~ voice_duration |
    "voice_pitch" ~ ":" ~ voice_pitch |
    "voice_pitch_range" ~ ":" ~ voice_pitch_range |
    "voice_rate" ~ ":" ~ voice_rate |
    "voice_stress" ~ ":" ~ voice_stress |
    "voice_volume" ~ ":" ~ voice_volume |
    "appearance" ~ ":" ~ appearance |
    "box_sizing" ~ ":" ~ box_sizing |
    "icon" ~ ":" ~ icon |
    "nav_down" ~ ":" ~ nav_down |
    "nav_index" ~ ":" ~ nav_index |
    "nav_left" ~ ":" ~ nav_left |
    "nav_right" ~ ":" ~ nav_right |
    "nav_up" ~ ":" ~ nav_up |
    "outline_offset" ~ ":" ~ outline_offset |
    "resize" ~ ":" ~ resize |
    "quotes" ~ ":" ~ quotes |
    "rotate" ~ ":" ~ rotate |
    "translate" ~ ":" ~ translate |
    "user_select" ~ ":" ~ user_select |
    "writing_mode" ~ ":" ~ writing_mode |
    "object_position" ~ ":" ~ object_position |
    "object_fit" ~ ":" ~ object_fit |
    "justify_self" ~ ":" ~ justify_self |
    "justify_content" ~ ":" ~ justify_content |
    "justify_items" ~ ":" ~ justify_items |
    "align_self" ~ ":" ~ align_self |
    "align_content" ~ ":" ~ align_content |
    "align_items" ~ ":" ~ align_items |
    "grid" ~ ":" ~ grid |
    "grid_area" ~ ":" ~ grid_area |
    "grid_auto_columns" ~ ":" ~ grid_auto_columns |
    "grid_auto_flow" ~ ":" ~ grid_auto_flow |
    "grid_auto_rows" ~ ":" ~ grid_auto_rows |
    "grid_column" ~ ":" ~ grid_column |
    "grid_column_end" ~ ":" ~ grid_column_end |
    "grid_column_start" ~ ":" ~ grid_column_start |
    "grid_row" ~ ":" ~ grid_row |
    "grid_row_end" ~ ":" ~ grid_row_end |
    "grid_row_start" ~ ":" ~ grid_row_start |
    "grid_template" ~ ":" ~ grid_template |
    "grid_template_areas" ~ ":" ~ grid_template_areas |
    "grid_template_columns" ~ ":" ~ grid_template_columns |
    "grid_template_rows" ~ ":" ~ grid_template_rows |
    "scrollbar_color" ~ ":" ~ scrollbar_color |
    "scrollbar_width" ~ ":" ~ scrollbar_width |
    "scrollbar_gutter" ~ ":" ~ scrollbar_gutter
}

// This group matches rules where the value is a string (containing any valid ASCII char).
aspect_ratio = { elements_value }
accent_color = { elements_value }
backdrop_filter = { elements_value }
content = { elements_value }
gap = { elements_value }
row_gap = { elements_value }
scale = { elements_value }
order = { elements_value }
pointer_events = { elements_value }
margin = { elements_value }
margin_bottom = { elements_value }
margin_left = { elements_value }
margin_right = { elements_value }
margin_top = { elements_value }
padding = { elements_value }
padding_bottom = { elements_value }
padding_left = { elements_value }
padding_right = { elements_value }
padding_top = { elements_value }
height = { elements_value }
width = { elements_value }
filter = { elements_value }
max_height = { elements_value }
max_width = { elements_value }
min_height = { elements_value }
min_width = { elements_value }
border = { elements_value }
border_bottom = { elements_value }
border_bottom_color = { elements_value }
border_bottom_style = { elements_value }
border_bottom_width = { elements_value }
border_color = { elements_value }
border_left = { elements_value }
border_left_color = { elements_value }
border_left_style = { elements_value }
border_left_width = { elements_value }
border_right = { elements_value }
border_right_color = { elements_value }
border_right_styles = { elements_value }
border_right_width = { elements_value }
border_style = { elements_value }
border_top = { elements_value }
border_top_color = { elements_value }
border_top_style = { elements_value }
border_top_width = { elements_value }
border_width = { elements_value }
outline = { elements_value }
outline_color = { elements_value }
outline_style = { elements_value }
outline_width = { elements_value }
border_bottom_left_radius = { elements_value }
border_bottom_right_radius = { elements_value }
border_image = { elements_value }
border_image_outset = { elements_value }
border_image_repeat = { elements_value }
border_image_slice = { elements_value }
border_image_source = { elements_value }
border_image_width = { elements_value }
border_radius = { elements_value }
border_top_left_radius = { elements_value }
border_top_right_radius = { elements_value }
box_decoration_break = { elements_value }
box_shadow = { elements_value }
background = { elements_value }
background_attachment = { elements_value }
background_color = { elements_value }
background_image = { elements_value }
background_position = { elements_value }
background_position_x = { elements_value }
background_position_y = { elements_value }
background_repeat = { elements_value }
background_clip = { elements_value }
background_origin = { elements_value }
background_size = { elements_value }
background_blend_mode = { elements_value }
color_profile = { elements_value }
opacity = { elements_value }
rendering_intent = { elements_value }
font = { elements_value }
font_family = { elements_value }
font_size = { elements_value }
font_style = { elements_value }
font_variant = { elements_value }
font_weight = { elements_value }
font_size_adjust = { elements_value }
font_stretch = { elements_value }
positioning = { elements_value }
bottom = { elements_value }
clear = { elements_value }
clip_path = { elements_value }
cursor = { elements_value }
display = { elements_value }
float = { elements_value }
left = { elements_value }
overflow = { elements_value }
position = { elements_value }
right = { elements_value }
top = { elements_value }
visibility = { elements_value }
z_index = { elements_value }
color = { elements_value }
direction = { elements_value }
flex_direction = { elements_value }
flex_wrap = { elements_value }
letter_spacing = { elements_value }
line_height = { elements_value }
line_break = { elements_value }
text_align = { elements_value }
text_decoration = { elements_value }
text_indent = { elements_value }
text_transform = { elements_value }
unicode_bidi = { elements_value }
vertical_align = { elements_value }
white_space = { elements_value }
word_spacing = { elements_value }
text_outline = { elements_value }
text_overflow = { elements_value }
text_shadow = { elements_value }
text_wrap = { elements_value }
word_break = { elements_value }
word_wrap = { elements_value }
list_style = { elements_value }
list_style_image = { elements_value }
list_style_position = { elements_value }
list_style_type = { elements_value }
border_collapse = { elements_value }
border_spacing = { elements_value }
caption_side = { elements_value }
empty_cells = { elements_value }
table_layout = { elements_value }
marquee_direction = { elements_value }
marquee_play_count = { elements_value }
marquee_speed = { elements_value }
marquee_style = { elements_value }
overflow_x = { elements_value }
overflow_y = { elements_value }
overflow_style = { elements_value }
rotation = { elements_value }
box_align = { elements_value }
box_direction = { elements_value }
box_flex = { elements_value }
box_flex_group = { elements_value }
box_lines = { elements_value }
box_ordinal_group = { elements_value }
box_orient = { elements_value }
box_pack = { elements_value }
alignment_adjust = { elements_value }
alignment_baseline = { elements_value }
baseline_shift = { elements_value }
dominant_baseline = { elements_value }
drop_initial_after_adjust = { elements_value }
drop_initial_after_align = { elements_value }
drop_initial_before_adjust = { elements_value }
drop_initial_before_align = { elements_value }
drop_initial_size = { elements_value }
drop_initial_value = { elements_value }
inline_box_align = { elements_value }
line_stacking = { elements_value }
line_stacking_ruby = { elements_value }
line_stacking_shift = { elements_value }
line_stacking_strategy = { elements_value }
text_height = { elements_value }
column_count = { elements_value }
column_fill = { elements_value }
column_gap = { elements_value }
column_rule = { elements_value }
column_rule_color = { elements_value }
column_rule_style = { elements_value }
column_rule_width = { elements_value }
column_span = { elements_value }
column_width = { elements_value }
columns = { elements_value }
animation = { elements_value }
animation_name = { elements_value }
animation_duration = { elements_value }
animation_timing_function = { elements_value }
animation_delay = { elements_value }
animation_fill_mode = { elements_value }
animation_iteration_count = { elements_value }
animation_direction = { elements_value }
animation_play_state = { elements_value }
transform = { elements_value }
transform_origin = { elements_value }
transform_style = { elements_value }
perspective = { elements_value }
perspective_origin = { elements_value }
backface_visibility = { elements_value }
transition = { elements_value }
transition_property = { elements_value }
transition_duration = { elements_value }
transition_timing_function = { elements_value }
transition_delay = { elements_value }
orphans = { elements_value }
page_break_after = { elements_value }
page_break_before = { elements_value }
page_break_inside = { elements_value }
widows = { elements_value }
mark = { elements_value }
mark_after = { elements_value }
mark_before = { elements_value }
phonemes = { elements_value }
rest = { elements_value }
rest_after = { elements_value }
rest_before = { elements_value }
voice_balance = { elements_value }
voice_duration = { elements_value }
voice_pitch = { elements_value }
voice_pitch_range = { elements_value }
voice_rate = { elements_value }
voice_stress = { elements_value }
voice_volume = { elements_value }
appearance = { elements_value }
box_sizing = { elements_value }
icon = { elements_value }
nav_down = { elements_value }
nav_index = { elements_value }
nav_left = { elements_value }
nav_right = { elements_value }
nav_up = { elements_value }
outline_offset = { elements_value }
resize = { elements_value }
quotes = { elements_value }
rotate = { elements_value }
translate = { elements_value }
user_select = { elements_value }
writing_mode = { elements_value }
object_position = { elements_value }
object_fit = { elements_value }
justify_self = { elements_value }
justify_content = { elements_value }
justify_items = { elements_value }
align_self = { elements_value }
align_content = { elements_value }
align_items = { elements_value }
grid = { elements_value }
grid_area = { elements_value }
grid_auto_columns = { elements_value }
grid_auto_flow = { elements_value }
grid_auto_rows = { elements_value }
grid_column = { elements_value }
grid_column_end = { elements_value }
grid_column_start = { elements_value }
grid_row = { elements_value }
grid_row_end = { elements_value }
grid_row_start = { elements_value }
grid_template = { elements_value }
grid_template_areas = { elements_value }
grid_template_columns = { elements_value }
grid_template_rows = { elements_value }
scrollbar_color = { elements_value }
scrollbar_width = { elements_value }
scrollbar_gutter = { elements_value }
